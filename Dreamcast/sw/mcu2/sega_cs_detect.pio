.program sega_cs_detect
set pindirs, 1
.wrap_target
	wait 0 gpio 4
	;; there seems to be 4 cycles of latency between the pin going low and the gpio going high
	;; This is even with the input synchronizers disabled
	;; Additionally using `wait pin` instead of `wait gpio` adds another cycle of latency
	set pins, 1 [3]
	set pins, 0

	wait 1 gpio 4
.wrap


; .define sega_cs0 3
.program sega_cs0_detect
.wrap_target
	wait 0 gpio 3
	irq 4
	wait 1 gpio 3
.wrap

; .define sega_cs1 4
.program sega_cs1_detect
.wrap_target
	wait 0 gpio 4
	irq 4
	wait 1 gpio 4
.wrap

; .define RD 16
.program sega_read_detect
.wrap_target
	wait 0 gpio 3
	irq 5
	wait 1 gpio 3
.wrap

; .define WR 17
.program sega_write_detect
.wrap_target
	wait 0 gpio 4
	irq 5
	wait 1 gpio 4
.wrap

.program test_irq_set_gpio
set pindirs, 1
.wrap_target
wait_for_cs:
	;; TODO Change pin direction to input

	wait 1 irq 4

;; 20ns of latency from a cs_detect program raising the irq to setting gpio 18 high
;; This means it's 2 cycles of latency added (which sounds right, 1 to set irq, 1 to read it)
	; set pins, 1 [3]
	; set pins, 0

	;; we about 40ns (first and worst case) and (164ns for cases after the very 1st cs change)
	;; between cs low and rd/wr low.

	;; 40ns  = 10 cycles
	;; 164ns = 43 cycles

	;; sample control pins (CS0, CS1, A0, A1, A2)
	;; flip the mux to data pins
	;; determine which register that is
	;; wait for read/write to go low
	;; if write: read data from bus
	;; if read: write data to bus

	in pins, 5
	push

	;; this will be used for the mux
	set pins, 1

	;; We could save two SM here by either waiting enough time and hoping we have the timing right
	;; OR maybe a 3rd way? S
	;; wait for read/write pio programs to detect a low signal
	wait 1 irq 5

	;; The READ pin is assigned to the JMP pin so we can jmp to write if READ is high (WRITE is low)
	jmp pin write_to_bus

;; WRITE low, read the pins and write to a register.
;; Pins should already be configured to input
read_from_bus:
	in pins, 16
	push
	jmp wait_for_cs

;; READ low, means we put data on lines from a register
write_to_bus:
	;; Change pin direction to output
	pull
	out pins, 16

.wrap